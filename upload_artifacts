#!/bin/sh

echo "Uploading release artifacts to GitHub..."
token=$1
tag_name=""

# Get the latest release
release=$(curl -sL -H "Authorization:token $token" https://api.github.com/repos/$2/releases/latest)

enable_gpu_plugin () {
sed -i -e 's/without_gpu_nvidia:0/without_gpu_nvidia:1/' \
-e 's/BuildRequires: cuda-nvml-dev-10-1/BuildRequires: cuda-nvml-devel-12-4/' \
-e '/%{?_with_gpu_nvidia} \\/a\
       --with-cuda=/usr/local/cuda \\' \
-e 's/write_gpu_nvidia/gpu_nvidia/g' \
contrib/redhat/collectd.spec
}
# Extract the id of the release from the creation response
id=$(echo "$release" | sed -n -e 's/"id":\ \([0-9]\+\),/\1/p' | head -n 1 | sed 's/[[:blank:]]//g')
if [ "$3" = "el8" ]; then
  tag_name=$(echo "$release" | sed -n -e 's/"tag_name":\ "\([[:graph:]]\+\)",/\1/p' | head -n 1 | sed 's/[[:blank:]]//g')
  git checkout refs/tags/$tag_name
  enable_gpu_plugin
  ./build.sh && ./configure && make rpms
elif [ "$3" = "el9" ]; then
  tag_name=$(echo "$release" | sed -n -e 's/"tag_name":\ "\([[:graph:]]\+\)",/\1/p' | head -n 1 | sed 's/[[:blank:]]//g')
  git checkout refs/tags/$tag_name
  enable_gpu_plugin
  sed -i s/PyEval_InitThreads/Py_Initialize/ src/python.c
  sed -i s/usmDESPrivProtocol/usmAESPrivProtocol/ src/snmp.c
  ./build.sh && ./configure && make rpms
elif [ "$3" = "ubuntu" ]; then
  tag_name=$(echo "$release" | sed -n -e 's/"tag_name":\ "\([[:graph:]]\+\)",/\1/p' | head -n 1 | sed 's/[[:blank:]]//g')
  git checkout refs/tags/$tag_name
  sed -i -e 's/confflags += --disable-gpu_nvidia/confflags += --with-cuda=\/usr\/local\/cuda/' debian/rules
  src_prefix="collectd_${tag_name#*-}"
  tar Jcvf ../${src_prefix}.orig.tar.xz .
  debuild -us -uc
fi

COLLECTD=""
FILEDATA=""
SSH=""
GPU_NVIDIA=""

# Upload the artifacts
if [ "$3" = "ubuntu" ]; then
    pkg_prefix="collectd-core_${tag_name#*-}"
    COLLECTD=$(find .. -type f -regextype posix-egrep -regex "\.\./${pkg_prefix}.+\.deb" -print)
    mv ${COLLECTD} .
    COLLECTD=$(basename ${COLLECTD})
else
    COLLECTD=$(basename `find . -type f -regextype posix-egrep -regex "\./collectd-[0-9].+\.rpm" -print`)
    FILEDATA=$(basename `find . -type f -regextype posix-egrep -regex "\./collectd-filedata.+\.rpm" -print`)
    SSH=$(basename `find . -type f -regextype posix-egrep -regex "\./collectd-ssh.+\.rpm" -print`)
    GPU_NVIDIA=$(basename `find . -type f -regextype posix-egrep -regex "\./collectd-gpu_nvidia-[[:digit:]].+\.rpm" -print`)
fi

if [ -n "$COLLECTD" ]; then
    curl -XPOST -H "Authorization:token $token" -H "Content-Type:application/octet-stream" --data-binary @$COLLECTD https://uploads.github.com/repos/$2/releases/$id/assets?name=$COLLECTD
fi

if [ -n "$FILEDATA" ]; then
    curl -XPOST -H "Authorization:token $token" -H "Content-Type:application/octet-stream" --data-binary @$FILEDATA https://uploads.github.com/repos/$2/releases/$id/assets?name=$FILEDATA
fi

if [ -n "$SSH" ]; then
    curl -XPOST -H "Authorization:token $token" -H "Content-Type:application/octet-stream" --data-binary @$SSH https://uploads.github.com/repos/$2/releases/$id/assets?name=$SSH
fi

if [ -n "$GPU_NVIDIA" ]; then
    curl -XPOST -H "Authorization:token $token" -H "Content-Type:application/octet-stream" --data-binary @$GPU_NVIDIA https://uploads.github.com/repos/$2/releases/$id/assets?name=$GPU_NVIDIA
fi
